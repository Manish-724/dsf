class TelephoneBook:
    def __init__(self, name, tel_no):
        self.name = name
        self.tel_no = tel_no


class HashTable:
    def __init__(self, size=10):
        self.size = size
        self.table = [None for _ in range(size)]

    def quadratic_probing_insert(self, name, tel_no):
        hash_value = tel_no % self.size  # Primary hash function
        j = 1  # Probing counter

        while self.table[hash_value] is not None:  # Handle collision
            hash_value = (hash_value + j ** 2) % self.size
            j += 1

        self.table[hash_value] = TelephoneBook(name, tel_no)

    def double_hashing_insert(self, name, tel_no):
        hash_value = tel_no % 9 + 7 - (tel_no % 7)  # Double hash formula
        j = 1  # Probing counter

        while self.table[hash_value] is not None:  # Handle collision
            hash_value = tel_no % 9 + j * (7 - (tel_no % 7))
            hash_value %= self.size
            j += 1

        self.table[hash_value] = TelephoneBook(name, tel_no)

    def display(self):
        print("-------------------------------")
        print("Index\tName\tTelephone No.")
        print("-------------------------------")
        for i, obj in enumerate(self.table):
            if obj is None:
                print(f"{i}\t-\t-")
            else:
                print(f"{i}\t{obj.name}\t{obj.tel_no}")
        print("-------------------------------")

    def search(self, name):
        for i, obj in enumerate(self.table):
            if obj is not None and obj.name == name:
                print(f"\nFound at Index {i}: {obj.name} - {obj.tel_no}")
                return
        print("\nNot found in the hash table.\n")


def main():
    # Initialize hash tables
    quadratic_table = HashTable()
    double_hash_table = HashTable()

    while True:
        print("-------------------------")
        print("\t1. Insert Record")
        print("\t2. Display Records")
        print("\t3. Search Record")
        print("\t4. Exit")
        print("-------------------------")

        try:
            choice = int(input("Enter choice: "))
        except ValueError:
            print("Invalid input. Please enter a number.")
            continue

        if choice == 1:
            name = input("Enter name: ")
            try:
                tel_no = int(input("Enter telephone number: "))
            except ValueError:
                print("Invalid input. Telephone number must be numeric.")
                continue

            print("Select collision resolution method:")
            print("\t1. Quadratic Probing")
            print("\t2. Double Hashing")
            try:
                method_choice = int(input("Enter choice: "))
            except ValueError:
                print("Invalid input. Please enter a number.")
                continue

            if method_choice == 1:
                quadratic_table.quadratic_probing_insert(name, tel_no)
            elif method_choice == 2:
                double_hash_table.double_hashing_insert(name, tel_no)
            else:
                print("Invalid method choice.")
                continue

        elif choice == 2:
            print("Select hash table to display:")
            print("\t1. Quadratic Probing")
            print("\t2. Double Hashing")
            try:
                table_choice = int(input("Enter choice: "))
            except ValueError:
                print("Invalid input. Please enter a number.")
                continue

            if table_choice == 1:
                quadratic_table.display()
            elif table_choice == 2:
                double_hash_table.display()
            else:
                print("Invalid table choice.")

        elif choice == 3:
            name = input("Enter name to search: ")
            print("Searching in Quadratic Probing table...")
            quadratic_table.search(name)
            print("Searching in Double Hashing table...")
            double_hash_table.search(name)

        elif choice == 4:
            print("Exiting program. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option.")


if __name__ == "__main__":
    main()
